import app from '../app.js';  // Using ES Modules syntax for importing the app
import debug from 'debug';    // Importing the debug module
import http from 'http';      // Importing the http module

// Create a debug instance for your app
const debugInstance = debug('campuspulse-mvp:server');

// Get the port from environment or use default
const port = normalizePort(process.env.PORT || '3005');
app.set('port', port);

// Create an HTTP server and pass the app instance
const server = http.createServer(app);

// Listen on the specified port
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Normalize the port number, ensuring it's a valid port
function normalizePort(val) {
  const portNumber = parseInt(val, 10);
  if (isNaN(portNumber)) {
    return val;
  }
  if (portNumber >= 0) {
    return portNumber;
  }
  return false;
}

// Error handler for server events
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Success listener for server
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debugInstance('Listening on ' + bind);
}
